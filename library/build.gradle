apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'

def nativeProject = rootProject.file('native')

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

dependencies {
    compile project(":native")
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.versions.kotlin}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.versions.junit}"
}

archivesBaseName = 'winsock-jni'
version = '0.1'
group = 'com.github.jeffreystoke.winsock'

task fatJar(type: Jar) {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    from(file('src')) {
        include '**/*.kt', '**/*.java'
        into('/src')
    }

    from("${nativeProject}/build/libs/winsock_jni/shared") {
        include '**/*.dll'
        into('/natives')
    }
    with jar
}

tasks.withType(Test) {
    def LIB_PATH = "${nativeProject}/build/libs/winsock_jni/shared"
    systemProperty "java.library.path", "${LIB_PATH}/windows_amd64"
    systemProperty "java.library.path", "${LIB_PATH}/windows_i386"
}

// release

artifacts {
    archives fatJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'winsock-jni'
                packaging 'jar'
                artifactId 'winsock-jni'
                description 'JNI Wrapper for WinSock API'
                url 'https://github.com/jeffreystoke/winsokc-jni'

                scm {
                    connection 'scm:git:https://github.com/jeffreystoke/winsock-jni'
                    developerConnection 'scm:git:https://github.com/jeffreystoke/winsock-jni'
                    url 'https://github.com/jeffreystoke/winsock-jni'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'jeffctor'
                        name 'Jeffrey Stoke'
                        email 'jeffctor@gmail.com'
                    }
                }
            }
        }
    }
}
