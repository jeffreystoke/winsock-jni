group 'com.github.jeffreystoke'
version '0.0.1-alpha'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'cpp'
apply plugin: 'maven-publish'

sourceSets {
    test {
        resources {
            srcDir "src/test"
            include "**/*.kt", "**/*.java"
        }
    }
}

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.jupiter:junit-jupiter-api:5.2.0"
    }
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

model {
    platforms {
        windows_i386 {
            architecture "i386"
            operatingSystem "windows"
        }
        windows_amd64 {
            architecture "amd64"
            operatingSystem "windows"
        }
    }

    toolChains {
        visualCpp(VisualCpp) {
            // installDir "C:/Program Files (x86)/Microsoft Visual Studio 14.0"
        }
    }

    components {
        winsock_jni(NativeLibrarySpec) {
            targetPlatform 'windows_amd64'
            targetPlatform 'windows_i386'
            sources {
                cpp {
                    lib library: 'winsock', linkage: 'api'
                    lib library: 'jni', linkage: 'api'
                    source {
                        srcDir 'src/main/jni'
                        include "**/*.cpp"
                    }
                }
            }

            binaries.withType(SharedLibraryBinarySpec) {
                cppCompiler.define 'WIN32'
                cppCompiler.define '_WINDOWS'
                cppCompiler.define '_USRDLL'
                cppCompiler.define '_WINDLL'
                cppCompiler.define '_UNICODE'
                cppCompiler.define 'UNICODE'
                cppCompiler.define '_EXPORTING'

                cppCompiler.define 'NDEBUG'
                cppCompiler.args '/Zi', '/nologo', '/W3', '/WX-', '/sdl', '/O2', '/Oi', '/GL', '/Gm-', '/EHsc', '/MD', '/GS', '/Gy', '/fp:precise', '/Zc:wchar_t', '/Zc:forScope', '/Gd', '/TP'

                linker.args '/INCREMENTAL:NO', '/NOLOGO', '/MANIFEST', '/manifest:embed'
                linker.args '/DEBUG', '/SUBSYSTEM:WINDOWS', '/OPT:REF', '/OPT:ICF', '/TLBID:1'
                linker.args '/DYNAMICBASE', '/NXCOMPAT', '/DLL', '/LTCG'

                if (targetPlatform == platforms.windows_amd64) {
                    linker.args '/MACHINE:X64'
                } else {
                    linker.args '/MACHINE:X86'
                }
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            winsock {
                headers.srcDir "C:/Program Files (x86)/Windows Kits/8.1/Include/um"
            }
            jni {
                def JAVA_HOME = "${System.properties.'java.home'}/.."
                headers.srcDir "${JAVA_HOME}/include"
                headers.srcDir "${JAVA_HOME}/include/win32"
            }
        }
    }

}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }

    from('src/main/java') {
        include '**/*.kt', '**/*.java'
    }

    from('build/libs/winsock_jni/shared') {
        include '**/*.dll'
        into('/natives')
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId 'winsock-jni'
            version project.version

            pom.withXml {
                asNode().appendNode('description', 'JNI wrapper for WinSock API')
            }
        }
    }
}

tasks.withType(Test) {
    systemProperty "java.library.path", file("build/libs/winsock_jni/shared/windows_amd64")
    systemProperty "java.library.path", file("build/libs/winsock_jni/shared/windows_i386")
}
